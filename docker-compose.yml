---
version: "3.9"
services:
  media-folder-creator:
    image: alpine:latest
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./media-folder-creator/create_folders.sh:/create_folders.sh
      - ./media-folder-creator/folder_list.txt:/folder_list.txt
      - ${DATA_ROOT}:/data
    command: sh -c "/create_folders.sh $(cat /folder_list.txt | tr '\n' ' ')"

  tailscale:
    image: tailscale/tailscale:stable
    container_name: tailscale
    network_mode: "host"
    hostname: ${TAILSCALE_HOSTNAME}
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./tailscale:/var/lib
      - /dev/net/tun:/dev/net/tun
      - ./tailscale-socket:/var/run/tailscale
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTHKEY}
      - TS_AUTH_ONCE=true
      - TS_HOSTNAME=${TAILSCALE_HOSTNAME}
      - TS_SOCKET=/var/run/tailscale/tailscaled.sock

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    command:
      - --ping=true
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.mytailscale.tailscale=true
      - --certificatesresolvers.myLE.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myLE.acme.storage=acme.json
      - --certificatesresolvers.myLE.acme.tlschallenge=true
    ports:
      - 8080:8080
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./tailscale-socket:/var/run/tailscale
    depends_on: 
      - tailscale
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 5s
      retries: 10

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./transmission:/config
      - ${DATA_ROOT}/torrents:/data/torrents
    restart: unless-stopped
    depends_on: 
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/transmission`)
      - traefik.http.routers.transmission.tls.certresolver=mytailscale
      - traefik.http.services.transmission.loadbalancer.server.port=9091

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    depends_on:
      - traefik
      - transmission
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/radarr`)
      - traefik.http.routers.radarr.tls.certresolver=mytailscale
      - traefik.http.services.radarr.loadbalancer.server.port=7878

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    depends_on:
      - traefik
      - transmission
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr.tls.certresolver=mytailscale
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping" ]
      interval: 5s
      retries: 10

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./lidarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    depends_on:
      - traefik
      - transmission
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/lidarr`)
      - traefik.http.routers.lidarr.tls.certresolver=mytailscale
      - traefik.http.services.lidarr.loadbalancer.server.port=8686

  buildarr:
    image: callum027/buildarr:latest
    container_name: buildarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    restart: always
    volumes:
      - ./buildarr:/config:ro
    depends_on:
      - radarr

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./jackett:/config
      - ${DATA_ROOT}/torrents/watch:/data/torrents/watch
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/jackett`)
      - traefik.http.routers.jackett.tls.certresolver=mytailscale
      - traefik.http.services.jackett.loadbalancer.server.port=9117
  
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    restart: unless-stopped

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    ports:
      - 8096:8096
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./jellyfin:/config
      - ${DATA_ROOT}/media:/data/media
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`$PUBLIC_JELLYFIN_URL`)
      - traefik.http.routers.jellyfin.tls.certresolver=myLE
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    depends_on:
      - traefik

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - LOG_LEVEL=debug
    volumes:
      - ./jellyseerr:/app/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`$PUBLIC_JELLYSEERR_URL`)
      - traefik.http.routers.jellyseerr.tls.certresolver=myLE
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
    depends_on:
      - traefik
      - jellyfin

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    ports:
      - 13378:80
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
    volumes:
      - ${DATA_ROOT}/media/audiobookshelf/audiobooks:/audiobooks
      - ${DATA_ROOT}/media/audiobookshelf/podcasts:/podcasts
      - ${DATA_ROOT}/media/audiobookshelf/metadata:/metadata
      - ./audiobookshelf:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`$TAILSCALE_FULL_URL`) && PathPrefix(`/audiobookshelf`)
      - traefik.http.routers.jackett.tls.certresolver=mytailscale
      - traefik.http.services.jackett.loadbalancer.server.port=80

